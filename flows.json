[{"id":"62cfd336ec9275a4","type":"tab","label":"PCMR Team 2D Vision","disabled":false,"info":"","env":[]},{"id":"f4d1caf7882978f5","type":"Start Robot Flow","z":"62cfd336ec9275a4","name":"Test Flow","robot":"f6c753596ef8d50a","x":180,"y":160,"wires":[["255c70dbd4a37f44"]]},{"id":"a49e527cb07fef3e","type":"End Robot Flow","z":"62cfd336ec9275a4","x":1190,"y":160,"wires":[[]]},{"id":"1b0f1b8526882347","type":"function","z":"62cfd336ec9275a4","name":"CV2D","func":"// var httpResp = msg.payload;\nvar httpResp = { \"Coordinates\": [\n                        [-553, -242, 70, -135, 0, 180],\n                        [-600, -300, 600, -135, 0, 180],\n                        [-690, -132, 70, -135, 0, 180],\n                        [-600, -300, 600, -135, 0, 180],\n                        [-641, -380, 70, -135, 0, 180],\n                        ] }\nnode.warn(httpResp)\n// let response = JSON.parse(httpResp)\nlet cords3D = httpResp.Coordinates\nnode.warn(cords3D)\n\n//  Transforn the coordinates to the necessary frame of reference\n\n\n\n\n// Not sore if necessary - Inverse kinematics - convert from Task space to Joint space\n// If we use the setPose() we can to cartesian walking -  no need for Inverse kinematics\n\n\n\n// Translate the robot the calculated 3d positions\n\nconst robot = msg.robot;\n\n\ncords3D.forEach(coordinate => {\n    /**\n     * Sends the robot the command to move its end-effector to an absolute pose in Cartesian space, approaching the\n     * waypoint with the specified velocity and acceleration.\n     * The function returns a promise, which resolves when the robot executed the movement.\n     * @param {Array<number>} values - Values consists out of 6 numbers, the first three define the x,y and z\n     * position in meters in Cartesian space. The next three define the x,y and z orientation given in Euler angles.\n     * @param {1|2} mode - The mode specifies how to approach the waypoint specified in\n     * this message.  Available values are 1 for a point-to-point motion and 2 for a linear motion.\n     * @param {number} vel - The velocity approaching the waypoint. 0 equals 0% of the maximum available\n     * velocity of the robot and 255 equals 100% of it.\n     * @param {number} acc - The acceleration approaching the waypoint. 0 equals 0% of the maximum available\n     * acceleration of the robot and 255 equals 100% of it.\n     * @returns {Promise} - Returns a promise, which resolves when the robot executed the movement.\n     */\n\n    console.log(\"----------------  Moving  Start -------------\")\n    robot.setPose(coordinate, 2, 200, 200);\n    console.log(\"----------------  Moving  End -------------\")\n});\n\n\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":690,"y":160,"wires":[["fa71837565a39afb"]]},{"id":"255c70dbd4a37f44","type":"Movement","z":"62cfd336ec9275a4","name":"Move to Ref Point.","approachVelocity":"50","approachAcceleration":"50","robot":"f6c753596ef8d50a","sequence":[{"type":"cartValues","name":"Ref Point","approachMode":2,"jointAngles":[],"cartValues":[-600,-300,600,-135,0,180]}],"x":410,"y":160,"wires":[["1b0f1b8526882347"]]},{"id":"fa71837565a39afb","type":"Movement","z":"62cfd336ec9275a4","name":"Move back to Ref point.","approachVelocity":"50","approachAcceleration":"50","robot":"f6c753596ef8d50a","sequence":[{"type":"cartValues","name":"Position 2","approachMode":2,"jointAngles":[],"cartValues":[-600,-300,600,-135,0,180]}],"x":990,"y":160,"wires":[["a49e527cb07fef3e"]]},{"id":"a9965b4d9af20e7a","type":"http request","z":"62cfd336ec9275a4","name":"Get Obj 3D points","method":"GET","ret":"txt","paytoqs":"ignore","url":"http://192.168.3.201:5000/","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":710,"y":300,"wires":[["3b911c072c2e7092"]]},{"id":"3b911c072c2e7092","type":"debug","z":"62cfd336ec9275a4","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":940,"y":300,"wires":[]},{"id":"d9a1ee9bbe5557e0","type":"inject","z":"62cfd336ec9275a4","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":420,"y":300,"wires":[["a9965b4d9af20e7a"]]},{"id":"f6c753596ef8d50a","type":"Robot","name":"Robby","manufacturer":"RobCo","adr":"localhost","targetPort":"25000","listeningPort":"25001"}]